/*
        A library for working with EP Solar charge controller registers
*/

#ifndef TracerRegisters_h
#define TracerRegisters_h

#include "Arduino.h"
#include "ModbusMaster.h"
#include "ModbusMasterCallable.h"

class TracerRegisters : public ModbusMasterCallable {
   public:
    TracerRegisters(uint8_t MAX485_RE_NEG, uint8_t MAX485_DE, Stream &serial);
    TracerRegisters();

    void getRegistersValueInJson(char *&loadValues, bool PC_ONLINE_STATUS);

    void updateModbusInformation();

    bool testConn(uint16_t address);
    /*
         Implementation of ModbusMasterCallable
      */
    virtual void onModbusPreTransmission();

    virtual void onModbusIdle();

    virtual void onModbusPostTransmission();
    bool connectionStablished = false;

   private:
    void updateStats();
    void AddressRegistry_3100();
    void AddressRegistry_311A();
    void AddressRegistry_3200();
    void AddressRegistry_331B();
    void AddressRegistry_9003();
    std::string to_string(float f);

   protected:
    ModbusMaster node;
    uint8_t max485_re_neg, max485_de;
    bool rs485readSuccess;
    float *variableValues;
    uint8_t current_update = 0;
    uint8_t result;
};

typedef enum : uint16_t {
    MODBUS_ADDRESS_PV_VOLTAGE = 0x3100,
    MODBUS_ADDRESS_PV_POWER = 0x3102,
    MODBUS_ADDRESS_PV_CURRENT = 0x3101,
    MODBUS_ADDRESS_LOAD_CURRENT = 0x310D,
    MODBUS_ADDRESS_LOAD_POWER = 0x310E,
    MODBUS_ADDRESS_BATT_TEMP = 0x3110,
    MODBUS_ADDRESS_BATT_VOLTAGE = 0x3104,
    MODBUS_ADDRESS_BATT_SOC = 0x311A,
    MODBUS_ADDRESS_BATT_REAL_RATED_POWER = 0x311D,
    MODBUS_ADDRESS_BATTERY_CHARGE_CURRENT = 0x3105,
    MODBUS_ADDRESS_BATTERY_CHARGE_POWER = 0x3106,
    MODBUS_ADDRESS_BATTERY_OVERALL_CURRENT = 0x331B,
    MODBUS_ADDRESS_LOAD_FORCE_ONOFF = 0x0006,
    MODBUS_ADDRESS_LOAD_MANUAL_ONOFF = 0x0002,
    MODBUS_ADDRESS_BATTERY_CHARGE_ONOFF = 0x0000,
    MODBUS_ADDRESS_BATTERY_STATUS = 0x3200,
    MODBUS_ADDRESS_CHARGING_EQUIPMENT_STATUS = 0x3200,
    MODBUS_ADDRESS_DISCHARGING_EQUIPMENT_STATUS = 0x3200,
    MODBUS_ADDRESS_STAT_MAX_PV_VOLTAGE_TODAY = 0x3300,
    MODBUS_ADDRESS_STAT_GENERATED_ENERGY_TODAY = 0x330C,
    MODBUS_ADDRESS_STAT_GENERATED_ENERGY_MONTH = 0x330E,
    MODBUS_ADDRESS_STAT_GENERATED_ENERGY_YEAR = 0x3310,
    MODBUS_ADDRESS_CHARGING_MODE = 0x3008,
    MODBUS_ADDRESS_CONTROLLER_TEMP = 0x3111,
    MODBUS_ADDRESS_REMOTE_BATTERY_TEMP = 0x311B,
    MODBUS_ADDRESS_REALTIME_CLOCK = 0x9013,

    MODBUS_ADDRESS_BATTERY_TYPE = 0x9000,

    MODBUS_ADDRESS_HIGH_VOLTAGE_DISCONNECT = 0x9003,
    MODBUS_ADDRESS_CHARGING_LIMIT_VOLTAGE = 0x9004,
    MODBUS_ADDRESS_OVER_VOLTAGE_RECONNECT = 0x9005,
    MODBUS_ADDRESS_EQUALIZATION_VOLTAGE = 0x9006,
    MODBUS_ADDRESS_BOOST_VOLTAGE = 0x9007,
    MODBUS_ADDRESS_FLOAT_VOLTAGE = 0x9008,
    MODBUS_ADDRESS_BOOST_RECONNECT_VOLTAGE = 0x9009,
    MODBUS_ADDRESS_LOW_VOLTAGE_RECONNECT = 0x900A,
    MODBUS_ADDRESS_UNDER_VOLTAGE_RECOVER = 0x900B,
    MODBUS_ADDRESS_UNDER_VOLTAGE_WARNING = 0x900C,
    MODBUS_ADDRESS_LOW_VOLTAGE_DISCONNECT = 0x900D,
    MODBUS_ADDRESS_DISCHARGING_LIMIT_VOLTAGE = 0x900E,
} TracerRegisterType;

typedef enum {
    PV_VOLTAGE,
    PV_POWER,
    PV_CURRENT,
    LOAD_CURRENT,
    LOAD_POWER,
    BATTERY_TEMP,
    BATTERY_VOLTAGE,
    BATTERY_SOC,
    CONTROLLER_TEMP,
    BATTERY_CHARGE_CURRENT,
    BATTERY_CHARGE_POWER,
    BATTERY_OVERALL_CURRENT,
    REALTIME_CLOCK,
    LOAD_FORCE_ONOFF,
    LOAD_MANUAL_ONOFF,
    REMOTE_BATTERY_TEMP,
    GENERATED_ENERGY_TODAY,
    GENERATED_ENERGY_MONTH,
    GENERATED_ENERGY_YEAR,
    GENERATED_ENERGY_TOTAL,
    MAXIMUM_PV_VOLTAGE_TODAY,
    MINIMUM_PV_VOLTAGE_TODAY,
    MAXIMUM_BATTERY_VOLTAGE_TODAY,
    MINIMUM_BATTERY_VOLTAGE_TODAY,
    BATTERY_BOOST_VOLTAGE,
    BATTERY_EQUALIZATION_VOLTAGE,
    BATTERY_FLOAT_VOLTAGE,
    BATTERY_TYPE,
    BATTERY_CAPACITY,
    BATERRY_REAL_RATED_POWER,
    BATTERY_FLOAT_MIN_VOLTAGE,
    BATTERY_CHARGING_LIMIT_VOLTAGE,
    BATTERY_DISCHARGING_LIMIT_VOLTAGE,
    BATTERY_LOW_VOLTAGE_DISCONNECT,
    BATTERY_LOW_VOLTAGE_RECONNECT,
    BATTERY_OVER_VOLTAGE_DISCONNECT,
    BATTERY_OVER_VOLTAGE_RECONNECT,
    BATTERY_UNDER_VOLTAGE_SET,
    BATTERY_UNDER_VOLTAGE_RESET,
    BATTERY_STATUS,
    CHARGING_EQUIPMENT_STATUS,
    DISCHARGING_EQUIPMENT_STATUS,
    CHARGING_DEVICE_ONOFF,
    HEATSINK_TEMP,

    //----------------
    VARIABLES_COUNT
} SolarTracerVariables;

#endif